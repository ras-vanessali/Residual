### define variable
SF_R<-matrix(0,nCat)
### Run model, loop through schedules
for (j in 1:nCat){
groupData<-subset(ModelData_Retail,ModelData_Retail$Schedule==retail_list[j,1])
groupDataft <- groupData %>%
filter(Y <= quantile(Y,0.75) + 2*IQR(Y) & Y>= quantile(Y,0.25) - 2*IQR(Y))
fitData<-within(groupDataft,CountryCode<-relevel(CountryCode,ref="USA"))
fitG<-lm(log(Y)~CountryCode,data=fitData)
SF_R[j]<-exp(fitG$coefficients[2])
}
### output results
rownames(SF_R)<-retail_list[,1]
SF_R<-rownames_to_column(data.frame(SF_R))
colnames(SF_R)<-c("Schedule","Retail")
"    Auction    "
### define variable
auction_list<-data.frame(rbind(SubcatDataAuc %>% select(Schedule),auction_categ %>% select(Schedule)) %>% distinct())
### Number of category
nCat_auc<-dim(auction_list)[1]
SF_A<-matrix(0,nCat_auc)
### Run model, loop through schedules
for (j in 1:nCat_auc){
groupData_A<-subset(ModelData_Auction,ModelData_Auction$Schedule==auction_list[j,1])
groupDataft <- groupData_A %>%
filter(Y <= quantile(Y,0.75) + 2*IQR(Y) & Y>= quantile(Y,0.25) - 2*IQR(Y))
fitData<-within(groupDataft,CountryCode<-relevel(CountryCode,ref="USA"))
fitG<-lm(log(Y)~CountryCode,data=fitData)
SF_A[j]<-exp(fitG$coefficients[2])
}
### output results
rownames(SF_A)<-auction_list[,1]
SF_A<-rownames_to_column(data.frame(SF_A))
colnames(SF_A)<-c("Schedule","Auction")
###############################################################################################################################
##################################################### Scale Factor Calculation ################################################
###############################################################################################################################
### pull the number of sales in each category in CAN
summaryAuc<-ModelData_Auction %>%
filter(CountryCode=='CAN') %>%
group_by(Schedule) %>%
summarise(nAuc=n())
summaryRet<-ModelData_Retail %>%
filter(CountryCode=='CAN') %>%
group_by(Schedule) %>%
summarise(nRet=n())
### merge retail and auction
Mergecounts<-merge(data.frame(summaryRet),data.frame(summaryAuc),by=c("Schedule"),all = T)
MergeAdj<-merge(SF_R,SF_A,by=c("Schedule"),all = T)
CalcAdj<-merge(MergeAdj,Mergecounts,by=c("Schedule"))
### calculate the global values #######################
Global <- CalcAdj %>%
drop_na() %>%
summarise(RetGlob = crossprod(Retail,nRet)/sum(nRet),
AucGlob = crossprod(Auction,nAuc)/sum(nAuc),
CountGlobRet = sum(nRet),
CountGlobAuc = sum(nAuc))
Global<-rownames_to_column(data.frame(Global))
Global$rowname = global
colnames(Global) <- c("Schedule","Retail","Auction", "nRet", "nAuc")
### Scale factors by schedules before any adjustments
AdjusterTB<-data.frame(as.list(rbind(Global,CalcAdj)))
#write.csv(AdjusterTB,"CANSF_Subcat0228.csv")
# assign values for borrowing schedules
join_brwIn<-merge(AdjusterTB %>% select(-nRet,-nAuc),inputBorw %>% select(Schedule,BorrowSchedule) %>% distinct(), by=c('Schedule'),all.x=T)
adj_output<-merge(join_brwIn,AdjusterTB %>% select(-nRet,-nAuc), by.y='Schedule',by.x='BorrowSchedule',all.x=T) %>%
mutate(Retail = ifelse(is.na(Retail.x), Retail.y, Retail.x),
Auction = ifelse(is.na(Auction.x), Auction.y, Auction.x)) %>%
select(Schedule, Retail, Auction)
#############################################################################################################################
##################################################### Cap, Channel, MoMLimit ################################################
#############################################################################################################################
#### prepare the table with caps
caps_table <- rbind(caps_table0,c(global,Min_delta,lowerB,upperB))
join_cap <- merge(adj_output,caps_table,by='Schedule',all.x=T)
### CAP the adjusters to lower and upper bounds
Cap_Canada<-join_cap %>%
mutate(cap_retail = pmin(as.numeric(CapsMax),pmax(Retail,as.numeric(CapsMin))),
cap_auction = pmin(as.numeric(CapsMax),pmax(Auction,as.numeric(CapsMin))))
### Apply minimum delta for channel
MinDelta<-Cap_Canada %>%
mutate(delta_ret = cap_retail -1, delta_auc = cap_auction -1) %>%
mutate(move_ret = minimumDelta(delta_auc,delta_ret,delta_ret,as.numeric(Delta)),
move_auc = minimumDelta(delta_auc,delta_ret,delta_auc,as.numeric(Delta))) %>%
mutate(chancheck_ret = cap_retail - move_ret,
chancheck_auc = cap_auction - move_auc) %>%
select(-delta_ret, -delta_auc,  -move_ret,-move_auc)
### Join to the application file
mergeAppl<-merge(comb_apply,MinDelta,by=c("Schedule"),all.x=TRUE) %>%
replace(.=='NULL','') %>%
mutate(CodeCS = paste(CategoryId,SubcategoryId,sep = '|')) %>%
select(Schedule,CodeCS,CategoryId,SubcategoryId,CategoryName,SubcategoryName,Retail,Auction,cap_retail, cap_auction, chancheck_ret, chancheck_auc)
### global
Globalrow<-MinDelta %>%
filter(Schedule==global) %>%
mutate(CodeCS = paste(globalId,'|'),Schedule=paste('.',global),CategoryId=globalId,SubcategoryId='',CategoryName=global,SubcategoryName='') %>%
select(Schedule,CodeCS,CategoryId,SubcategoryId,CategoryName,SubcategoryName,Retail,Auction,cap_retail, cap_auction, chancheck_ret, chancheck_auc)
### append global with others
combApplication = rbind(Globalrow,mergeAppl)
### MoM limit
lastM_cap<-merge(combApplication,LastMonthconcat,by=c('CodeCS'),all.x=T) %>%
mutate(retail_final = MoMlimit(RetailPercent,chancheck_ret,LstM_limit),
auction_final =  MoMlimit(AuctionPercent,chancheck_auc,LstM_limit))
#############################################################################################################################
##################################################### Final files and export ################################################
#############################################################################################################################
### Upload file
ExportTb <-lastM_cap %>%
rename(retail=retail_final,auction=auction_final) %>%
select(CategoryId,SubcategoryId,retail,auction) %>%
mutate(CountryAdjusterTypeID=1)
ExportTb[is.na(ExportTb)]<-''
### Share page
sharepage<-lastM_cap %>%
mutate(retailDiff = retail_final-RetailPercent,
auctionDiff = auction_final-AuctionPercent) %>%
select(Schedule,CategoryName,SubcategoryName, RetailPercent, AuctionPercent, retail_final, auction_final,
retailDiff,  auctionDiff,cap_retail , cap_auction , chancheck_ret ,chancheck_auc,Retail,Auction) %>%
arrange(Schedule,CategoryName,SubcategoryName)
sharepage2<-rbind(merge(Monthof100.Retail.trans,'Retail'),merge(Monthof100.Auction.trans,'Auction')) %>%
mutate(OldestMonthInuse = if_else(as.Date(DateOn100d) >=thresholdMonth,thresholdMonth,as.Date(DateOn100d)))%>%
select(Schedule,y,DateOn100d,OldestMonthInuse) %>%
rename(SaleType=y,MonthOn100pts = DateOn100d)
### Export the files
write.xlsx(ExportTb,uploadFile,sheetName='Sheet1',row.names = F)
write.xlsx2(as.data.frame(sharepage),file = paste(Sys.Date(),'MoMSharePage_Canada.xlsx'), sheetName = 'SharePage1',row.names = F)
write.xlsx2(as.data.frame(sharepage2),file = paste(Sys.Date(),'MoMSharePage_Canada.xlsx'), sheetName = 'SharePage2',append=T,row.names = F)
Global
AdjusterTB
adj_output
Globalrow
mergeAppl<-merge(comb_apply,MinDelta,by=c("Schedule"),all.x=TRUE) %>%
replace(.=='NULL','') %>%
mutate(CodeCS = paste(CategoryId,SubcategoryId,sep = '|')) %>%
select(Schedule,CodeCS,CategoryId,SubcategoryId,CategoryName,SubcategoryName,Retail,Auction,cap_retail, cap_auction, chancheck_ret, chancheck_auc)
View(mergeAppl)
### global
Globalrow<-MinDelta %>%
filter(Schedule==global) %>%
mutate(CodeCS = paste(globalId,'|'),Schedule=paste('.',global),CategoryId=globalId,SubcategoryId='',CategoryName=global,SubcategoryName='') %>%
select(Schedule,CodeCS,CategoryId,SubcategoryId,CategoryName,SubcategoryName,Retail,Auction,cap_retail, cap_auction, chancheck_ret, chancheck_auc)
View(Globalrow)
### CAP the adjusters to lower and upper bounds
Cap_Canada<-join_cap %>%
mutate(cap_retail = pmin(as.numeric(CapsMax),pmax(Retail,as.numeric(CapsMin))),
cap_auction = pmin(as.numeric(CapsMax),pmax(Auction,as.numeric(CapsMin))))
View(Cap_Canada)
caps_table
caps_table0
adj_output
Cap_Canada
caps_table
global
caps_table0
c(global,Min_delta,lowerB,upperB)
#############################################################################################################################
##################################################### Cap, Channel, MoMLimit ################################################
#############################################################################################################################
#### prepare the table with caps
caps_table <- rbind(caps_table0,c(global,Min_delta,lowerB,upperB))
c(global,Min_delta,lowerB,upperB)
caps_table0
#############################################################################################################################
##################################################### Cap, Channel, MoMLimit ################################################
#############################################################################################################################
#### prepare the table with caps
globcaps<-c(global,Min_delta,lowerB,upperB)
globcaps
colnames(globcaps)<c('Schedule', 'Delta', 'CapsMin', 'CapsMax')
colnames(globcaps)<-c('Schedule', 'Delta', 'CapsMin', 'CapsMax')
globcaps
colnames(globcaps)<-c('Schedule', 'Delta', 'CapsMin', 'CapsMax')
#############################################################################################################################
##################################################### Cap, Channel, MoMLimit ################################################
#############################################################################################################################
#### prepare the table with caps
globcaps<-c(global,Min_delta,lowerB,upperB)
caps_table <- rbind(caps_table0,globcaps)
caps_table0
df[nrow(caps_table0) + 1,] = globcaps
caps_table <-
caps_table0[nrow(caps_table0) + 1,] = globcaps
caps_table <-caps_table0[nrow(caps_table0) + 1,] = globcaps
caps_table0[nrow(caps_table0) + 1,] = globcaps
globcaps
caps_table0
globcaps
#############################################################################################################################
##################################################### Cap, Channel, MoMLimit ################################################
#############################################################################################################################
#### prepare the table with caps
globcaps<-c(global,Min_delta,lowerB,upperB)
caps_table <- rbind(caps_table0,globcaps)
caps_table
#############################################################################################################################
##################################################### Cap, Channel, MoMLimit ################################################
#############################################################################################################################
#### prepare the table with caps
globcaps<-c(global,Min_delta,lowerB,upperB)
caps_table <- rbind(caps_table0,globcaps)
join_cap <- merge(adj_output,caps_table,by='Schedule',all.x=T)
join_cap
#############################################################################################################################
##################################################### Cap, Channel, MoMLimit ################################################
#############################################################################################################################
#### prepare the table with caps
globcaps<-c(global,Min_delta,lowerB,upperB)
globcaps
Global
library(RODBC)
library(RODBCext)
library(lattice)
library(latticeExtra)
library(dplyr)
library(tidyr)
library(tibble)
library(lubridate)
library(xlsx)
library(stringr)
############################## Declare inputs #####################################
#DBserver = 'production'
DBserver = 'rasquery'
CountryCode='USA'
stdInd=3
target_Age = 8
num_threshold = 20
GlobalList<-c(313,	6,	2509,	15,	29,	315,	360,	451,	316,	362)
MoM_cap=0.02
cap_resid_low = 1.02
cap_resid_hi = 1.25
WorstEcon_cap =.98
BestEcon_cap = 1.0005
Econ_gap = 0.15
publishDate<-Sys.Date() - days(day(Sys.Date()))
MbefpubDate<-publishDate%m-% months(1)
## file path & read file name
file_path = "C:/Users/vanessa.li/Documents/GitHub/Residual"
setwd(file_path)
excelfile = '20200331 SchedulesManagement.xlsx'
##################################### Load data #####################################
runSQL<-parse('SQLqueries.r')
eval(runSQL)
starttime<-Sys.time()
channel<-odbcConnect(DBserver)
uploadData<-sqlQuery(channel,uploadData.sql)
recessionYr.ret<-sqlQuery(channel,recessionYr.ret.sql)
currentYr.ret<-sqlQuery(channel,currentYr.ret.sql)
bestYr.ret<-sqlQuery(channel,bestYr.ret.sql)
recessionYr.auc<-sqlQuery(channel,recessionYr.auc.sql)
currentYr.auc<-sqlQuery(channel,currentYr.auc.sql)
bestYr.auc<-sqlQuery(channel,bestYr.auc.sql)
AllClass<-sqlQuery(channel,AllClass.sql)
LastMonth<-sqlQuery(channel,LastMonth.sql)
endtime<-Sys.time()
endtime-starttime
#############################
## run functions
runfunc<-parse('functions')
eval(runfunc)
## run functions
runfunc<-parse('functions.r')
eval(runfunc)
################################### Read input file ##########################################
### load the inputfeed file
In<-data.frame(read.xlsx(excelfile,sheetName='In')) %>% filter(Country==CountryCode) %>% select(-ClassificationId,-Plot,-CategoryName,-SubcategoryName,-MakeName,-CSMM,-ValidSchedule)
InR<-data.frame(read.xlsx(excelfile,sheetName='InR')) %>% filter(Country==CountryCode) %>% select(-ClassificationId,-Plot,-CategoryName,-SubcategoryName,-MakeName,-CSMM,-ValidSchedule,-CheckJoin) %>%
filter(BorrowType=='RetailBorrowAuction')
inAll <- rbind(In,InR %>% select(-BorrowSchedule,-BorrowType))
SchedFullList<-inAll %>% select(Schedule) %>% distinct()
Out<-data.frame(read.xlsx(excelfile,sheetName='Out')) %>% filter(Country==CountryCode)
OutR<-data.frame(read.xlsx(excelfile,sheetName='OutR')) %>% filter(Country==CountryCode & str_detect(Schedule,' RbA '))
### Application tab
comb_Out<-rbind(Out %>% select(ClassificationId, Schedule, CategoryId,SubcategoryId, SubcategoryName,Level2,Plot),OutR %>% select(ClassificationId, Schedule, CategoryId,SubcategoryId,SubcategoryName,Level2,Plot))
######################################### Residual factors #################################################
### break down ###
Catlevel<-inAll %>% filter(Level2 =='Category') %>% select(-SubcategoryId,-MakeId)
Subcatlevel<-inAll %>% filter(Level2 == "SubcatGroup") %>% select(-MakeId)
Makelevel<-inAll %>% filter(Level2 =='Make')
### Join in Category level
CatData <- merge(uploadData,Catlevel, by=c("CategoryId")) %>%
select(CategoryId, CategoryName, SubcategoryId,SubcategoryName,MakeId, MakeName, ModelId, ModelName, ModelYear,everything())
### Join in Subcategory Level
SubcatData <- merge(uploadData,Subcatlevel, by=c('CategoryId',"SubcategoryId")) %>%
select(CategoryId, CategoryName, SubcategoryId,SubcategoryName,MakeId, MakeName, ModelId, ModelName, ModelYear,everything())
### Join in Make Level
MakeData<-merge(uploadData,Makelevel, by=c('CategoryId',"SubcategoryId","MakeId")) %>%
select(CategoryId, CategoryName, SubcategoryId,SubcategoryName,MakeId, MakeName, ModelId, ModelName, ModelYear,everything())
### Combine C, CS and CSM levels of data into one & exclude bad data
unionData = rbind(CatData,SubcatData,MakeData) %>% filter(Age>=2 & Age<=10)
### data exclusion by some criteria
Datainput<-unionData %>%
#  filter(Flag2=='inUse' & Flag1=='inUse') %>%
filter(Flag=='inUse') %>%
group_by(Schedule) %>%
filter(Age <= mean(Age) + stdInd*sd(Age) & Age >= mean(Age) - stdInd*sd(Age)) #%>%
### Fitting the regression
SchedFullList = data.frame(Datainput) %>% select(Schedule) %>% distinct()
N=dim(SchedFullList)[1]
factor<-rep(0,N)
n<-rep(0,N)
for (j in 1:N){
sched_data <- subset(Datainput,Datainput$Schedule==SchedFullList[j,1])
if (dim(sched_data)[1] >=30) {
## fit the regression and force the line go through (0,1)
fit <-lm(log(CostRatio) ~ Age, sched_data)
cooksd <- cooks.distance(fit)
influential <- as.numeric(names(cooksd)[(cooksd > 20*mean(cooksd, na.rm=T))])
if (length(influential)==0){
model <-lm(log(CostRatio) ~ 0 + I(Age), sched_data)
}
else{
remain  = sched_data[-influential, ]
model <-lm(log(CostRatio) ~ 0 + I(Age), remain)
}
factor[j]<-exp(coef(model)[1]*target_Age)
n[j]<-ifelse(dim(remain)[1] ==0, dim(sched_data)[1], dim(remain)[1])
}
}
out<-data.frame(SchedFullList,n,factor)
## cap the residual factor
cap_out <- out %>%
mutate(cap_factor = pmax(cap_resid_low,pmin(cap_resid_hi,factor)))
## join to apply the factors to all classes in out tab
join_out<-merge(comb_Out,cap_out,by='Schedule',all.x=T) %>%
mutate(MarketCode='USNA') %>%
select(MarketCode, ClassificationId, cap_factor) %>%
rename(ResidSF = cap_factor)
## join to apply the factors to all classes in out tab
join_out<-merge(comb_Out,cap_out,by='Schedule',all.x=T) %>%
mutate(MarketCode='USNA') %>%
select(MarketCode, ClassificationId, cap_factor) %>%
rename(ResidSF = cap_factor)
View(join_out)
################################# Retail Econ Factor ###################################
# recession
comb_recession<-sched.aggr(recessionYr.ret,inAll,'Retail','') %>%
group_by(Schedule, yearAge) %>%
summarise(totalunits = sum(Units),
avg = sum(Units*SPCost)/sum(Units))
# best
comb_best<-sched.aggr(bestYr.ret,inAll,'Retail','best') %>%
group_by(Schedule,SaleYear, yearAge) %>%
summarise(totalunits = sum(Units),
avg = sum(Units*SPCost)/sum(Units))
joinretail_cur<-sched.aggr(currentYr.ret,inAll,'Retail','current')
# current
comb_current<-joinretail_cur %>%
group_by(Schedule, yearAge) %>%
summarise(totalunits = sum(Units),
avg = sum(Units*SPCost)/sum(Units))
comb_currentMonth<-merge(joinretail_cur %>%
filter(as.Date(SaleMonth) %in% c(MbefpubDate, publishDate)) %>%
group_by(Schedule, ModelYear) %>%
summarise(units.recent = sum(Units),
avg.recent = sum(Units*SPCost)/sum(Units)),
joinretail_cur %>%
group_by(Schedule, ModelYear) %>%
summarise(totalunits = sum(Units),
avg = sum(Units*SPCost)/sum(Units)),by=c('Schedule','ModelYear')) %>%
mutate(depr = avg*(.99)^5.5) %>%
mutate(factor = depr/avg.recent,
mincounts = pmin(totalunits,units.recent),
sumcounts = totalunits+units.recent)
avgMinN.recentF <- comb_currentMonth %>%
group_by(Schedule) %>%
summarise(avg.mincount = mean(mincounts))
recent.ret.factor<-merge(comb_currentMonth, avgMinN.recentF,by='Schedule')%>%
mutate(weight = (mincounts/avg.mincount)*sumcounts) %>%
group_by(Schedule) %>%
summarise(recFactor_v0 = sum(factor*weight) /sum(weight),
n = sum(units.recent)) %>%
## cap the factor by number of data
mutate(recFactor_v1 = ifelse(n>num_threshold, 1*recFactor_v0, ((num_threshold-n)+n*recFactor_v0)/num_threshold)) %>%
mutate(recFactor = ifelse(recFactor_v1<1,pmax(((num_threshold-n)+n*.8)/num_threshold,recFactor_v1),pmin(((num_threshold-n)+n*1.2)/num_threshold,recFactor_v1)))
############## Worst Econ
## calculate the ratio of recession year/ current year, as well as min unit counts and sum unit counts
worstEcon_calc_s1<-merge(comb_recession,comb_current,by=c('Schedule','yearAge')) %>%
mutate(ratio = avg.x/avg.y,
mincounts = pmin(totalunits.x , totalunits.y),
sumcounts = totalunits.x + totalunits.y)
## average the min unit counts
avgMincounts<-worstEcon_calc_s1 %>%
group_by(Schedule) %>%
summarise(avg.mincount = mean(mincounts))
## join the above table back and do the weighted average
worstEcon_calc<-merge(worstEcon_calc_s1,avgMincounts,by = 'Schedule') %>%
mutate(units_N = (mincounts/avg.mincount)*sumcounts) %>%
group_by(Schedule) %>%
summarise(avg.r = sum(units_N * ratio)/sum(units_N),
recession_n = sum(totalunits.x),
current_n = sum(totalunits.y)) %>%
filter(recession_n >num_threshold & current_n >num_threshold)
## join to the schedule list
WorstEcon_out<-merge(worstEcon_calc,SchedFullList,by='Schedule',all.y=T)
retRecent_out <- merge(recent.ret.factor,comb_Out,by='Schedule') %>% select(ClassificationId,recFactor)
## results table
WE_outvf<-merge(inherit.fact(WorstEcon_out),retRecent_out,by='ClassificationId',all.y=T) %>%
mutate(SFWorstRetail = pmin(as.numeric(avg.r)*recFactor, WorstEcon_cap)) %>%
select(ClassificationId,SFWorstRetail)
View(WE_outvf)
retRecent_out <- merge(recent.ret.factor,comb_Out,by='Schedule') %>% select(ClassificationId,recFactor)
View(remain)
recent.ret.factor<-merge(comb_currentMonth, avgMinN.recentF,by='Schedule')%>%
mutate(weight = (mincounts/avg.mincount)*sumcounts) %>%
group_by(Schedule) %>%
summarise(recFactor_v0 = sum(factor*weight) /sum(weight),
n = sum(units.recent)) %>%
## cap the factor by number of data
mutate(recFactor_v1 = ifelse(n>num_threshold, 1*recFactor_v0, ((num_threshold-n)+n*recFactor_v0)/num_threshold)) %>%
mutate(recFactor = ifelse(recFactor_v1<1,pmax(((num_threshold-n)+n*.8)/num_threshold,recFactor_v1),pmin(((num_threshold-n)+n*1.2)/num_threshold,recFactor_v1)))
## join to the schedule list
WorstEcon_out<-merge(worstEcon_calc,SchedFullList,by='Schedule',all.y=T)
retRecent_out <- merge(recent.ret.factor,comb_Out,by='Schedule',all.y=T) %>% select(ClassificationId,recFactor)
View(remain)
View(retRecent_out)
View(comb_currentMonth)
View(recent.ret.factor)
View(recent.ret.factor)
retRecent_out <- merge(recent.ret.factor,comb_Out,by='Schedule',all.y=T) %>% select(ClassificationId,recFactor)
View(recent.ret.factor)
View(retRecent_out)
retRecent_out[is.na(retRecent_out)]<-1
View(retRecent_out)
## results table
WE_outvf<-merge(inherit.fact(WorstEcon_out),retRecent_out,by='ClassificationId',all.y=T) %>%
mutate(SFWorstRetail = pmin(as.numeric(avg.r)*recFactor, WorstEcon_cap)) %>%
select(ClassificationId,SFWorstRetail)
############## Best Econ
### calculate the best econ rate using 2018 as best year
comb_best.2018 = bestEconfunc(comb_best,comb_current,2018)
### calculate the best econ rate using 2017 as best year
comb_best.2017 = bestEconfunc(comb_best,comb_current,2017)
### calculate the best econ rate using 2016 as best year
comb_best.2016 = bestEconfunc(comb_best,comb_current,2016)
### compare the three years and pick the max
bestYr.ret.pick<-rbind(comb_best.2018,comb_best.2017,comb_best.2016) %>%
group_by(Schedule) %>%
slice(which.max(avg.r))
BestEcon_out<-merge(bestYr.ret.pick,SchedFullList,by='Schedule',all.y=T) %>% select(Schedule,avg.r)
## combine & cap
BE_outvf<-merge(inherit.fact(BestEcon_out),retRecent_out,by='ClassificationId',all.y=T) %>%
mutate(SFBestRetail = pmax(BestEcon_cap,as.numeric(avg.r)*recFactor)) %>%
select(ClassificationId,SFBestRetail)
## recession
comb_recession.auc<-sched.aggr(recessionYr.auc,inAll,'Auction','') %>%
group_by(Schedule, PublishYear) %>%
summarise(avg.auc=mean(AvgFlv),
avg.ret=mean(AvgFmv)) %>%
mutate(recession.r = avg.auc/avg.ret)
## best
comb_best.auc<-sched.aggr(bestYr.auc,inAll,'Auction','') %>%
group_by(Schedule, PublishYear) %>%
summarise(avg.auc=mean(AvgFlv),
avg.ret=mean(AvgFmv)) %>%
mutate(best.r = avg.auc/avg.ret)
## current
comb_current.auc<-sched.aggr(currentYr.auc,inAll,'Auction','') %>%
group_by(Schedule, PublishYear) %>%
summarise(avg.auc=mean(AvgFlv),
avg.ret=mean(AvgFmv)) %>%
mutate(current.r = avg.auc/avg.ret)
############## Worst Econ
## join worst year and current year & calculate the worst econ factor
worstEcon_calc.auc<-merge(comb_recession.auc,comb_current.auc,by=c('Schedule')) %>%
mutate(avg.r = pmin(WorstEcon_cap,recession.r/current.r)) %>%
select(Schedule,avg.r)
WorstEcon_out.auc<-merge(worstEcon_calc.auc,SchedFullList,by='Schedule',all.y=T)
## combine
WE_outvf.auc<-merge(inherit.fact(WorstEcon_out.auc),WE_outvf,by='ClassificationId') %>%
mutate(SFWorstAuction = as.numeric(avg.r) * as.numeric(SFWorstRetail)) %>%
select(ClassificationId,SFWorstAuction)
View(WE_outvf.auc)
View(WE_outvf)
############## Best Econ
BestEcon_calc.auc<-merge(comb_best.auc,comb_current.auc,by=c('Schedule')) %>%
mutate(avg.r = pmax(BestEcon_cap,best.r/current.r)) %>%
select(Schedule,PublishYear.x,avg.r)
BestYref.auc<-merge(bestYr.ret.pick %>% select(Schedule,sy),BestEcon_calc.auc,by.x=c('Schedule','sy'),by.y=c('Schedule','PublishYear.x'))
BestEcon_out.auc<-merge(BestYref.auc,SchedFullList,by='Schedule',all.y=T) %>% select(-sy)
## combine & cap
BE_outvf.auc<-merge(inherit.fact(BestEcon_out.auc),BE_outvf,by='ClassificationId') %>%
mutate(SFBestAuction = as.numeric(avg.r) * as.numeric(SFBestRetail)) %>%
select(ClassificationId,SFBestAuction)
residTbmerge<-merge(merge(merge(merge(join_out,BE_outvf,by='ClassificationId'), WE_outvf ,by='ClassificationId'), BE_outvf.auc,by='ClassificationId'),WE_outvf.auc,by='ClassificationId')
merge(join_out,BE_outvf,by='ClassificationId',all.x=T)
dim(join_out)[1]
dim(join_out)[1]==dim(BE_outvf)[1]
dim(BE_outvf)[1]
dim(join_out)[1]==dim(BE_outvf)[1]==dim(WE_outvf)[1]
dim(join_out)[1]==dim(WE_outvf)[1]
dim(join_out)[1]==dim(WE_outvf.auc)[1]
dim(join_out)[1]==dim(BE_outvf.auc)[1]
## recession
comb_recession.auc<-sched.aggr(recessionYr.auc,inAll,'Auction','') %>%
group_by(Schedule, PublishYear) %>%
summarise(avg.auc=mean(AvgFlv),
avg.ret=mean(AvgFmv)) %>%
mutate(recession.r = avg.auc/avg.ret)
View(comb_recession.auc)
View(recessionYr.auc)
################################# Retail Econ Factor ###################################
# recession
comb_recession<-sched.aggr(recessionYr.ret,inAll,'Retail','') %>%
group_by(Schedule, yearAge) %>%
summarise(totalunits = sum(Units),
avg = sum(Units*SPCost)/sum(Units))
View(comb_recession)
View(comb_recession)
comb_recession %>% filter(Schedule=='Concrete Equipment Vibrators RbA Concrete USA')
recessionYr.ret %>% filter(SubcategoryId==65)
comb_recession<-sched.aggr(recessionYr.ret,inAll,'Retail','')
comb_recession %>% filter(Schedule=='Concrete Equipment Vibrators RbA Concrete USA')
